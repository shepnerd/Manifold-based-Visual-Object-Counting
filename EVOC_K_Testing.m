% fast example-based visual object counting
% testing for the amounts of salient patterns
% Code copyright: Shepnerd
% Contact: wygamle@pku.edu.cn

clear all;

numbers = 128:128:1024;

for idx = 2 : length(numbers)
    % target dataset
    % dataset = 'ucsd';
    % dataset = 'mall';
    dataset = 'cell';
    dataset_Mode = 3;
    % just for ucsd as it contains many forms of training and testing.
    modeName = {'max','down','up','min','dense'}; 
    % decide whether use the mask to filter out some outliers
    useMask = true;

    % patch setting
    region.size = 4;
    region.teStep = 2;
    region.trStep = 2;

    % the number of examplar
    region.types = numbers(idx);

    % the number of training samples.
    nTrain = 16;

    

    assert(nTrain < 101);

    % the range of training samples
    trRange = 1:100;

    % the number of testing samples.
    nTest = 100;
    assert(nTest < 101);

    % the range of testing samples
    teRange = 101:200;
    

    % the cross-validation number
    folders = 5;

    % the number of all images, including testing and training ones.
    totalNum = 200;
    if ~strcmp(dataset,'cell')
        totalNum = 2000;
    end
    % assert(totalNum == (length(trRange) + length(teRange)));

    % regularized parameter for controlling the synthetic result.
    lambda = 0.001;

    % the dimensions of feature vectors
    vd = region.size^2;


    % quick access
    quickFileName = ['example_' dataset '.mat'];

    % saving folder for synthetic images generated by algorithm
    saveName = ['ANR_' dataset '+' datestr(now,'yyyy-mm-dd_HH-MM-SS') ...
        '_P+' num2str(region.size) '_teS+' num2str(region.teStep) '_trS+' ...
        num2str(region.trStep) '_train+' num2str(nTrain) '_atoms' ...
        num2str(region.types) '_cross+' num2str(folders)];
    mkdir(saveName);

    errArray = zeros(folders + 2, 1);
    resArray = cell(folders, 1);

    trueCount = zeros(nTest, 1);
    estCount = zeros(nTest, 1);
    denMats = cell(1, nTest);
    synMats = cell(1, nTest);
    cntMats = cell(1, nTest);

    for k = 1 : folders

        % dictName = ['dict1' '.mat'];
        dictName = [saveName '_folder' num2str(k) '.mat'];
        if exist(dictName,'file')
            load(dictName,'Dict','centroids');
        else
            [features, images, gtDensities, mask] = createQuickAccess(quickFileName, dataset, totalNum);

            %
            data.features = features;
            data.images = images;
            data.gtDensities = gtDensities;
            params.nTrain = nTrain;
            params.nTest = nTest;
            params.trRange = trRange;
            params.teRange = teRange;

            [trSet, teSet] = genTrTe(data, params);

            [trFeats, trRaws, trDen] = stripPatches(trSet, region.size, region.trStep);

            disp(['Training data prepared ...']);

            disp(['Train anchored neighborhood examplar ...']);

            K = region.types;
            [idx, centroids] = kmeans(trRaws, K);

            disp(['Learning the projective matrix ...']);

            Dict = zeros(vd,vd,K);

            for i = 1 : K
                Di = trRaws(idx == i,:)';
                Dd = trDen(idx == i,:)';
                Dict(:,:,i) = Dd / (Di' * Di + lambda * eye(size(Di,2))) * Di';
            end

            save(dictName,'Dict', 'centroids');
        end
    %     t = 0; %% time recording
        for i = 1 : nTest
            if useMask
                teSet.gtDensities{i}(mask == 0) = 0;
            end

            trueCount(i) = sum(teSet.gtDensities{i}(:));
            im = teSet.images{i};

    %         tic; %% time recording
            [estCount(i), denMats{i}, synMats{i}, cntMats{i}] = FEVOCounting(im, Dict, centroids, region.size, region.teStep);
    %         t = t + toc; %% time recording

            if strcmp(dataset,'cell')
                outIm = zeros(256, 256, 3);
                outIm(:, :, 3) = synMats{i};
            else
                outIm = synMats{i};
            end

            if useMask
                denMats{i}(mask == 0) = 0;
                estCount(i) = sum(denMats{i}(:));
            end

            imwrite(uint8(outIm), [saveName '/syn_' num2str(i+nTest) '_folder_' num2str(k) '.png']);
            fprintf('Image #%d: trueCount = %f, ANR predicted count = %f...\n',...
                i + nTest, trueCount(i), estCount(i));
        end

    %     fprintf('totoal time = %f s, mean time = %f s...\n', t, t / nTest); %% time recording

        result.estCount = estCount;
        result.trueCount = trueCount;
        result.meanerr = mean(abs(trueCount - estCount));
        result.synMats = synMats;
        result.denMats = denMats;

        resArray{k} = result;
        errArray(k) = result.meanerr;
        disp('------');
        fprintf('Folder %03d > ANR average error = %f\n', k, ...
            mean(abs(trueCount-estCount)));
    end

    errArray(folders + 1) = mean(errArray(1 : folders));
    errArray(folders + 2) = std(errArray(1 : folders));

    save(saveName, 'errArray', 'resArray');

    fprintf('\n\n* Result > ANR %d folders average error = %f~%f\n', folders,...
        errArray(folders+1), errArray(folders+2));

end

